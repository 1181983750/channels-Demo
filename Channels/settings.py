"""
Django settings for Channels project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dn0^%tw1w4vkg9&s8&h1g86lu36h34!q_7%mcph!-2q7d=!y8r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'corsheaders',
    # 添加 Channels功能
    'channels',
    'User.apps.UserConfig',
    'Message.apps.MessageConfig',
    'chat',
    'poll',
    # 'coreapi',
    # 'drf_yasg',
]

DATABASES = {
    # 'default': {
    #     # 使用的数据库 mysql
    #     'ENGINE': 'sql_server.pyodbc',
    #     # 数据库的名字
    #     'NAME': 'myfirstdb',
    #     # 链接数据库的用户名
    #     'USER': 'root',
    #     # 链接数据的密码
    #     'PASSWORD': '1181983750a',
    #     # 链接数据库的地址
    #     'HOST': '127.0.0.1',
    #     # 链接数据库的端口号
    #     'PORT': 3306,
    # }
    'default': {
        'ENGINE': 'mssql',  # 数据库引擎设置
        # 'ENGINE': 'sql_server.pyodbc',  # 数据库引擎设置
        'NAME': 'channles',  # 要连接的数据库名
        'USER': 'sa',  # 数据库用户名
        'PASSWORD': 'CgSqlServerRoot2012',  # 数据库密码
        'HOST': '172.17.18.110',  # 数据库主机地址
        'PORT': 1433,  # 数据库端口号，默认可以不写 写了连不上....???
        'OPTIONS': {
            'driver': 'SQL Server Native Client 11.0',
            # 'driver': 'ODBC Driver 17 for SQL Server',
            'MARS_Connection': True
        },
    },
}

# 查看orm操作执行的原生SQL语句
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # token过期拦截
    'utils.middleware.user_auth_middleware.TokenAuthMiddleware',
    # 日志
    # 'utils.middleware.LogMiddleware.LogMiddleware'
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
ROOT_URLCONF = 'Channels.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# HTTP默认的
WSGI_APPLICATION = 'Channels.wsgi.application'

# Channels WebSocket协议
ASGI_APPLICATION = 'Channels.routing.application'
# ∵channels依赖 redis ∴配置redis数据库连接方式   指向Channels.routing的application对象
# WebSocket
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}
# channels内存通道层
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels.layers.InMemoryChannelLayer"
#     }
# }


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# token jwt配置项
SIMPLE_JWT = {
    # 'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),#令牌的默认“exp”声明值
    # 'REFRESH_TOKEN_LIFETIME': timedelta(days=1),#指定刷新令牌的有效期
    # 'ALGORITHM': 'HS256',
    # 'SIGNING_KEY': SECRET_KEY,#生成的令牌进行签名的私钥
    # 'AUTH_HEADER_TYPES': ('Bearer',),#身份验证的视图将接受的授权标头类型
    # 'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),#指定令牌对证明身份验证有效的时间
    # 'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),#指定滑动令牌在多长时间内有效刷新
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators


REST_FRAMEWORK = {
    # 过滤,将前端传递过来的字段进行过滤,更具过滤字段返还数据
    'DEFAULT_FILTER_BACKENDS': [
        # 如果需要局部指定,则在视图中添加相应属性
        # 例如 filter_backends = [OrderingFilter, DjangoFilterBackend]
        # 指定过滤器类
        'django_filters.rest_framework.DjangoFilterBackend',  # django过滤器, 精确匹配
        'rest_framework.filters.SearchFilter',  # rest_framework 过滤器
        'rest_framework.filters.OrderingFilter',  # rest_framework 排序
    ],

    # 指定支持coreapi的Schema
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}
# swagger 文档设置
SWAGGER_SETTINGS = {
    # 基础样式
    'SECURITY_DEFINITIONS': {
        "basic": {
            'type': 'basic'
        }
    },
    # 到处文件配置
    'DEFAULT_INFO': 'server.urls.openapi_info',
    # 如果需要登录才能够查看接口文档, 登录的链接使用restframework自带的.
    # 'LOGIN_URL': 'rest_framework:login',
    # 'LOGOUT_URL': 'rest_framework:logout',
    "enabled_methods": [
        'get',
        'post',
        'put',
        'patch',
        'delete'
    ],
    # 'DOC_EXPANSION': None,
    # 'SHOW_REQUEST_HEADERS':True,
    # 'USE_SESSION_AUTH': True,
    # 'DOC_EXPANSION': 'list',
    # 接口文档中方法列表以首字母升序排列
    'APIS_SORTER': 'alpha',
    # 如果支持json提交, 则接口文档中包含json输入框
    'JSON_EDITOR': True,
    # 方法列表字母排序
    'OPERATIONS_SORTER': 'alpha',
    'VALIDATOR_URL': None,
}

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGE_CODE = 'zh-Hans'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False  # 时区 夏令时

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
# 上传的文件存放目录位置
MEDIA_ROOT = os.path.join(BASE_DIR, 'static_files/')
# 页面访问根路径 相当于 http://127.0.0.1:8000/static_files/
MEDIA_URL = "static_files/"
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
